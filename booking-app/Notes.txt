To compile all of the go files in a directory...

    go run *.go

Go modules are used for package management in Go, we can use external packages to add functionality
to our applications.

    go mod init github.com/<name>/<package>

After refactoring our application into packages we can run it by using...

    go run ./cmd/web/*.go

We want to create a config package that can be used in other parts of our application for configuration
related stuff. We want to avoid importing other packages here since it can be used in any other parts of
the application. If we are not mindful of this we can get into a situation where we are stuck in an
import cycle and the application will not compile.

    The config package will be imported in many different places and will use the standard library but
    it will not be importing other packages.

    Go import cycles occur when two or more packages depend on each other, either directly or indirectly, 
    forming a cycle in the import graph. This means that a package A imports a package B, which in turn 
    imports package A, and so on, forming a closed loop.

To install an external package from the root of the project where the go.mod file is located run the following...

    go get github.com/bmizerany/pat

    This will install the pat router. An HTTP request multiplexer is a piece of software that is used to 
    route incoming HTTP requests to the appropriate handlers based on their URL paths and HTTP methods.

    We can see that the go.mod file was updated and a go.sum file was created.

We can install a new router called chi, it has some more features and is more widely used compared to pat.
It also has support for middleware built in.

    go get -u github.com/go-chi/chi/v5

To remove any unused packages from our project we can run the following...

    go mod tidy.

Chi has a very simple API...

	mux := chi.NewRouter()
	mux.Use(middleware.Recoverer)
	mux.Get("/", handlers.Repo.Home)
	return mux

We can use middleware Use(), there are some built in and we can also create our own. All the middlewares are
net/http compatible

There is a package we can use to implement CSRF protection...

    go get github.com/justinas/nosurf

We can create a custom middleware for creating CSRF tokens. These get set as a cookie on the users browser.

We want a way to implement sessions using Go. This package supports many different kinds of session storage...

    go get github.com/alexedwards/scs/v2

To run the tests and display coverage...

    go test -coverprofile=coverage.out && go tool cover -html=coverage.out

To run all the tests for the project change to the root directory and run...

    go test -v ./..

We can create a shell script to simplify building and running our application. See run.sh. This will build a binary
of our application and then run it.


POSTGRES
--------

Postgres uses SQL just like MySQL. Although they both use the same language there are some different features.

    Postgres supports some data types that MySQL does not, for example ranges and json

There are some differences in the SQL syntax as well but it is mostly similar to that in MySQL. For example...

    insert into my_table (my_column) values ('My Value');

    update my_table set my_column = 'My Value' where id = 1;

    delete from my_table where id = 1;

To delete clear all the rows from a table...

    delete from my_table;

To drop a table...

    drop table animals;

A basic left join with where clauses...

    select p.first_name,
        p.last_name,
        e.email_address,
        pe.phone_number
    from people p
    left join emails e
        on (e.people_id = p.id)
    left join phones pe
        on (pe.people_id = p.id)
    where p.first_name = 'John'
    or p.last_name = 'Jones';

The Buffalo framework has a tool called Soda that can be used for managing migrations...

    https://gobuffalo.io/documentation/database/soda/

Once Soda and Pop are installed we can run...

    ~/go/bin/soda

To create a new migration for a user table...

    ~/go/bin/soda generate fizz CreateUserTable

    There will be two new empty files in the migrations folder, one for up and one for down

Once we have defined a migration we can run migrations using...

    ~/go/bin/soda migrate

We can run the down command to reverse the migrations...

    ~/go/bin/soda migrate down

We can also use SQL files for migrations...

    ~/go/bin/soda generate sql MyMigration